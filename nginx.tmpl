##
# If we receive X-Forwarded-Proto, pass it through; otherwise, pass along the
# scheme used to connect to this server
map $http_x_forwarded_proto $proxy_x_forwarded_proto {
  default $http_x_forwarded_proto;
  ''      $scheme;
}

# If we receive Upgrade, set Connection to "upgrade"; otherwise, delete any
# Connection header that may have been passed to this server
map $http_upgrade $proxy_connection {
  default upgrade;
  ''      '';
}

log_format vhost '$host $remote_addr - $remote_user [$time_local] '
'"$request" $status $body_bytes_sent '
'"$http_referer" "$http_user_agent"';

access_log /proc/self/fd/1 vhost;
error_log /proc/self/fd/2;

# HTTP 1.1 support
proxy_http_version 1.1;
proxy_buffering off;
proxy_set_header Host $http_host;
proxy_set_header Upgrade $http_upgrade;
proxy_set_header Connection $proxy_connection;
proxy_set_header X-Real-IP $remote_addr;
proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
proxy_set_header X-Forwarded-Proto $proxy_x_forwarded_proto;

# server {
  #     listen 80 default_server;
  #     server_name _; # This is just an invalid value which will never trigger on a real hostname.
  #     return 503;
  # }

  {{ range $host, $containers := groupByMulti $ "Env.VIRTUAL_HOST" "," }}

  upstream {{ $host }} {
    {{ range $container := $containers }}
    {{ $addrLen := len $container.Addresses }}
    {{/* If only 1 port exposed, use that */}}
    {{ if eq $addrLen 1 }}
    {{ with $address := index $container.Addresses 0 }}
    # {{$container.Name}}
    server {{ $address.IP }}:{{ $address.Port }};
    {{ end }}
    {{/* If more than one port exposed, use the one matching VIRTUAL_PORT env var */}}
    {{ else if $container.Env.VIRTUAL_PORT }}
    {{ range $address := .Addresses }}
    {{ if eq $address.Port $container.Env.VIRTUAL_PORT }}
    # {{$container.Name}}
    server {{ $address.IP }}:{{ $address.Port }};
    {{ end }}
    {{ end }}
    {{/* Else default to standard web port 80 */}}
    {{ else }}
    {{ range $address := $container.Addresses }}
    {{ if eq $address.Port "80" }}
    # {{$container.Name}}
    server {{ $address.IP }}:{{ $address.Port }};
    {{ end }}
    {{ end }}
    {{ end }}
    {{ end }}
  }

  server {
    listen 80 default_server;
    server_name {{ $host }};

    location / {
      proxy_pass http://{{ $host }};
      {{ if (exists (printf "/etc/nginx/htpasswd/%s" $host)) }}
      auth_basic  "Restricted {{ $host }}";
      auth_basic_user_file    {{ (printf "/etc/nginx/htpasswd/%s" $host) }};
      {{ end }}
    }
      location ~* ^/s3-internal/(.*) {
        internal;
        resolver 8.8.8.8;

        set $download_host bobcat_media.s3.amazonaws.com;

        proxy_pass_request_headers off;

        proxy_set_header Host $download_host;

        proxy_buffering off;
        proxy_set_header Content-Length "";
        proxy_set_header Cookie "";

        proxy_hide_header x-amz-request-id;
        proxy_hide_header x-amz-meta-uid;
        proxy_hide_header x-amz-id-2;
        proxy_hide_header x-amz-meta-mode;
        proxy_hide_header x-amz-meta-mtime;
        proxy_hide_header x-amz-meta-gid;
        proxy_hide_header x-amz-version-id;
        proxy_hide_header accept-ranges;

        # Do not touch local disks when proxying
        # content to clients
        proxy_method GET;
        proxy_pass_request_body off;
        proxy_max_temp_file_size 0;

        #       add_header bc_original_file_id $upstream_http_bc_original_file_id;

        set $download_uri $1;

        set $download_url https://$download_host/$download_uri?$args;

        expires max;
        proxy_pass $download_url;

      }

      location /viewer/ {
        proxy_set_header X-Forwarded-For reflection.grahamdigital.com;
        proxy_set_header Host $http_host;

        proxy_pass   http://gunicorn_reflection;
        proxy_redirect  http://$http_host/  http://reflection.grahamdigital.com/;
      }
    }
